import tkinter as tk
from tkinter import ttk
import matplotlib.pyplot as plt
import numpy as np
from qiskit import QuantumCircuit
from qiskit.quantum_info import Statevector

def scattering_circuit(num_qb, barrier_qb, ph_sft):
    quantum_circuit = QuantumCircuit(num_qb)

    for i in range(num_qb):
        quantum_circuit.h(i)

    quantum_circuit.p(ph_sft, barrier_qb)

    def qft(qc, n):
        try:
            for j in range(n):
                for k in range(j):
                    qc.cp(np.pi / (2 ** (j - k)), k, j)
                qc.h(j)
        except Exception as e:
            print(f"QFT Error: {e}")
        return qc

    qft(quantum_circuit, num_qb)

    return quantum_circuit

def marginal_prob(qc):
    statevector = Statevector.from_instruction(qc)
    probs = np.abs(statevector.data) ** 2

    num_qubits = int(np.log2(len(probs)))


    qubit_probs = {q: [0, 0] for q in range(num_qubits)}


    for state_index, prob in enumerate(probs):
        bin_state = bin(state_index)[2:].zfill(num_qubits)

        for qubit in range(num_qubits):
            if bin_state[qubit] == '0':
                qubit_probs[qubit][0] += prob
            else:
                qubit_probs[qubit][1] += prob

    return qubit_probs

def qb_probabilities(qb_probs):
    qubits = list(qb_probs.keys())
    p_zeros = [qb_probs[q][0] for q in qubits]
    p_ones = [qb_probs[q][1] for q in qubits]

    width = 0.35

    x = np.arange(len(qubits))

    plt.figure(figsize=(10, 5))
    plt.bar(x - width / 2, p_zeros, width, label="Reflection ( |0⟩ State )", color="#A8DADC")
    plt.bar(x + width / 2, p_ones, width, label="Transmission ( |1⟩ State )", color="#F4A261")

    plt.xlabel("Qubit Index")
    plt.ylabel("Probability")
    plt.title("Quantum Scattering Probability Distribution")
    plt.xticks(x, [f"Qubit {q}" for q in qubits])
    plt.legend()
    plt.show()

def update_circuit():
    try:
        num_qubits = int(qb_entry.get())
        barrier_qubit = int(br_entry.get())
        phase_shift = float(ph_entry.get())

        if barrier_qubit >= num_qubits:
            print("Error: Barrier qubit index is out of range!")
            return

        qc = scattering_circuit(num_qubits, barrier_qubit, phase_shift)

        qubit_probs = marginal_prob(qc)

        qb_probabilities(qubit_probs)

    except ValueError:
        print("Error: Please enter valid numerical values for all inputs.")
    except Exception as e:
        print(f"Unexpected Error: {e}")

root = tk.Tk()
root.title("Quantum Scattering Probability Distribution")
root.geometry("400x200")

ttk.Label(root, text="Number of Qubits:").pack()
qb_entry = ttk.Entry(root)
qb_entry.insert(0, "5")
qb_entry.pack()

ttk.Label(root, text="Barrier Position:").pack()
br_entry = ttk.Entry(root)
br_entry.insert(0, "3")
br_entry.pack()

ttk.Label(root, text="Barrier Phase:").pack()
ph_entry = ttk.Entry(root)
ph_entry.insert(0, "1.57")
ph_entry.pack()

ttk.Button(root, text="Generate Probability Distribution", command=update_circuit).pack()

root.mainloop()
