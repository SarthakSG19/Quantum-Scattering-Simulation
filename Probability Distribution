import numpy as np
import matplotlib.pyplot as plt
from qiskit import QuantumCircuit
from qiskit.quantum_info import Statevector
import tkinter as tk
from tkinter import ttk

def create_scattering_circuit(total_qubits, obstacle_qubit, phase_shift):
    q_c = QuantumCircuit(total_qubits)

    for q in range(total_qubits):
        q_c.h(q)

    q_c.p(phase_shift, obstacle_qubit)

    def q_f_t(qc, n):
        try:
            for a in range(n):
                for b in range(a):
                    qc.cp(np.pi / (2 ** (a - b)), a, b)
                qc.h(a)
        except Exception as e:
            print(f"Error in QFT: {e}")

        return qc

    q_f_t(q_c, total_qubits)
    return q_c

def update_plot():
    try:
        total_qb = int(num_qb_entry.get())
        obstacle_qb = int(barrier_pos_entry.get())
        phase_sft = float(barrier_ph_entry.get())

        qc = create_scattering_circuit(total_qb, obstacle_qb, phase_sft)

        state = Statevector.from_instruction(qc)
        probabilities = np.abs(state.data) ** 2

        state_lbs = [format(i, f'0{total_qb}b') for i in range(len(probabilities))]

        sorted_indc = np.argsort(probabilities)[::-1]
        sorted_states = [state_lbs[i] for i in sorted_indc]
        sorted_probs = probabilities[sorted_indc]

        plt.figure(figsize=(10, 5))
        plt.bar(sorted_states, sorted_probs, color='blue')
        plt.xlabel("Quantum State")
        plt.ylabel("Probability")
        plt.title("Quantum State Probability Distribution")
        plt.xticks(rotation=90)
        plt.grid(axis='y', linestyle='--', alpha=0.7)

        plt.show()

    except Exception as e:
        print(f"Error: {e}")

root = tk.Tk()
root.title("Quantum Scattering Simulator")
root.geometry("400x300")  # Tweaked for better UI fit

tk.Label(root, text="Number of Qubits:").pack()
num_qb_entry = ttk.Entry(root)
num_qb_entry.pack()
num_qb_entry.insert(0, "5")  # Default value

tk.Label(root, text="Barrier Position:").pack()
barrier_pos_entry = ttk.Entry(root)
barrier_pos_entry.pack()
barrier_pos_entry.insert(0, "3")

tk.Label(root, text="Barrier Phase:").pack()
barrier_ph_entry = ttk.Entry(root)
barrier_ph_entry.pack()
barrier_ph_entry.insert(0, "1.57")

plot_button = ttk.Button(root, text="Generate Graph", command=update_plot)
plot_button.pack(pady=10)

root.mainloop()
